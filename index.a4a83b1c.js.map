{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar table = document.querySelector(\"table\");\nvar headers = table.querySelectorAll(\"th\");\nvar tbody = table.querySelector(\"tbody\");\nheaders.forEach(function(header, index) {\n    header.addEventListener(\"click\", function() {\n        sortTableByColumn(index);\n    });\n});\nvar sortDirections = Array(headers.length).fill(true);\nfunction sortTableByColumn(columnIndex) {\n    var rowsArray = Array.from(tbody.querySelectorAll(\"tr\"));\n    var isAscending = sortDirections[columnIndex];\n    sortDirections[columnIndex] = !isAscending;\n    var sortedRows = rowsArray.sort(function(rowA, rowB) {\n        var cellA = rowA.cells[columnIndex].innerText;\n        var cellB = rowB.cells[columnIndex].innerText;\n        if (headers[columnIndex].innerText === \"Age\") return isAscending ? parseInt(cellA) - parseInt(cellB) : parseInt(cellB) - parseInt(cellA);\n        if (headers[columnIndex].innerText === \"Salary\") return parseFloat(cellA.replace(/[$,]/g, \"\")) - parseFloat(cellB.replace(/[$,]/g, \"\"));\n        return cellA.localeCompare(cellB);\n    });\n    sortedRows.forEach(function(row) {\n        return tbody.appendChild(row);\n    });\n}\ntbody.addEventListener(\"click\", function(e) {\n    if (e.target && e.target.nodeName === \"TD\") {\n        var row = e.target.parentNode;\n        tbody.querySelectorAll(\"tr\").forEach(function(tr) {\n            return tr.classList.remove(\"active\");\n        });\n        row.classList.add(\"active\");\n    }\n});\nvar pushNotification = function(posTop, posRight, title, description, type) {\n    var notification = document.createElement(\"div\");\n    notification.className = \"notification \".concat(type);\n    notification.setAttribute(\"data-qa\", \"notification \".concat(type));\n    notification.style.top = \"\".concat(posTop, \"px\");\n    notification.style.right = \"\".concat(posRight, \"px\");\n    var h2 = document.createElement(\"h2\");\n    h2.className = \"title\";\n    h2.textContent = title;\n    var p = document.createElement(\"p\");\n    p.textContent = description;\n    notification.appendChild(h2);\n    notification.appendChild(p);\n    document.body.appendChild(notification);\n    setTimeout(function() {\n        notification.style.display = \"none\";\n    }, 2000);\n};\nvar form = document.createElement(\"form\");\nform.classList.add(\"new-employee-form\");\nform.innerHTML = '\\n  <label for=\"employeeName\">\\n    Name:\\n    <input data-qa=\"name\" type=\"text\" id=\"employeeName\" name=\"employeeName\">\\n  </label>\\n  <label for=\"position\">\\n    Position:\\n    <input data-qa=\"position\" type=\"text\" id=\"position\" name=\"position\">\\n  </label>\\n  <label for=\"office\">\\n    Office:\\n    <select data-qa=\"office\" id=\"office\" name=\"office\">\\n      <option value=\"Tokyo\">Tokyo</option>\\n      <option value=\"Singapore\">Singapore</option>\\n      <option value=\"London\">London</option>\\n      <option value=\"New York\">New York</option>\\n      <option value=\"Edinburgh\">Edinburgh</option>\\n      <option value=\"San Francisco\">San Francisco</option>\\n    </select>\\n  </label>\\n  <label for=\"age\">\\n    Age:\\n    <input data-qa=\"age\" type=\"number\" id=\"age\" name=\"age\">\\n  </label>\\n  <label for=\"salary\">\\n    Salary:\\n    <input data-qa=\"salary\" type=\"number\" id=\"salary\" name=\"salary\">\\n  </label>\\n  <button type=\"submit\">Save to table</button>\\n';\ndocument.body.appendChild(form);\nfunction salaryFormat(number) {\n    return new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n    }).format(number);\n}\nform.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    var employeeName = form.employeeName.value;\n    var position = form.position.value;\n    var office = form.office.value;\n    var age = form.age.value;\n    var salary = form.salary.value;\n    if (employeeName.trim().length < 4) pushNotification(100, 5, \"Error\", \"Name must be grater than 4\", \"error\");\n    if (age < 18 || age > 90) pushNotification(220, 5, \"Error\", \"Age must be between 18 and 90\", \"error\");\n    if (employeeName.trim().length >= 4 && position.trim() && office && age > 18 && age < 90 && salary) {\n        var newRow = document.createElement(\"tr\");\n        var salaryFormated = salaryFormat(parseFloat(salary));\n        newRow.innerHTML = \"\\n    <td>\".concat(employeeName, \"</td>\\n    <td>\").concat(position, \"</td>\\n    <td>\").concat(office, \"</td>\\n    <td>\").concat(age, \"</td>\\n    <td>\").concat(salaryFormated, \"</td>\\n  \");\n        tbody.appendChild(newRow);\n        form.reset();\n        pushNotification(220, 5, \"Success\", \"Employee was successfully added\", \"success\");\n    } else pushNotification(340, 5, \"Error\", \"All fields must be filled!\", \"error\");\n});\ntbody.addEventListener(\"dblclick\", function(e) {\n    if (e.target && e.target.nodeName === \"TD\") {\n        var cell = e.target;\n        var originalContent = cell.innerText;\n        cell.innerText = \"\";\n        var input = document.createElement(\"input\");\n        input.type = \"text\";\n        input.value = originalContent;\n        cell.appendChild(input);\n        input.focus();\n        input.addEventListener(\"blur\", function() {\n            saveCellContent(cell, input, originalContent);\n        });\n        input.addEventListener(\"keydown\", function(ev) {\n            if (ev.key === \"Enter\") saveCellContent(cell, input, originalContent);\n        });\n    }\n});\nfunction saveCellContent(cell, input, originalContent) {\n    var newContent = input.value.trim();\n    if (newContent) {\n        if (cell.innerText === \"Salary\") {\n            var salary = parseFloat(newContent.replace(/[$,]/g, \"\"));\n            if (!isNaN(salary)) cell.innerText = salaryFormat(salary);\n            else {\n                cell.innerText = originalContent;\n                pushNotification(\"Error\", \"Invalid salary format!\", \"error\");\n            }\n        } else cell.innerText = newContent;\n    } else cell.innerText = originalContent;\n}\n\n//# sourceMappingURL=index.a4a83b1c.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst headers = table.querySelectorAll('th');\nconst tbody = table.querySelector('tbody');\n\nheaders.forEach((header, index) => {\n  header.addEventListener('click', () => {\n    sortTableByColumn(index);\n  });\n});\n\nconst sortDirections = Array(headers.length).fill(true);\n\nfunction sortTableByColumn(columnIndex) {\n  const rowsArray = Array.from(tbody.querySelectorAll('tr'));\n  const isAscending = sortDirections[columnIndex];\n\n  sortDirections[columnIndex] = !isAscending;\n\n  const sortedRows = rowsArray.sort((rowA, rowB) => {\n    const cellA = rowA.cells[columnIndex].innerText;\n    const cellB = rowB.cells[columnIndex].innerText;\n\n    if (headers[columnIndex].innerText === 'Age') {\n      return isAscending\n        ? parseInt(cellA) - parseInt(cellB)\n        : parseInt(cellB) - parseInt(cellA);\n    }\n\n    if (headers[columnIndex].innerText === 'Salary') {\n      return (\n        parseFloat(cellA.replace(/[$,]/g, '')) -\n        parseFloat(cellB.replace(/[$,]/g, ''))\n      );\n    }\n\n    return cellA.localeCompare(cellB);\n  });\n\n  sortedRows.forEach((row) => tbody.appendChild(row));\n}\n\ntbody.addEventListener('click', (e) => {\n  if (e.target && e.target.nodeName === 'TD') {\n    const row = e.target.parentNode;\n\n    tbody.querySelectorAll('tr').forEach((tr) => tr.classList.remove('active'));\n    row.classList.add('active');\n  }\n});\n\nconst pushNotification = (posTop, posRight, title, description, type) => {\n  const notification = document.createElement('div');\n\n  notification.className = `notification ${type}`;\n  notification.setAttribute('data-qa', `notification ${type}`);\n  notification.style.top = `${posTop}px`;\n  notification.style.right = `${posRight}px`;\n\n  const h2 = document.createElement('h2');\n\n  h2.className = 'title';\n  h2.textContent = title;\n\n  const p = document.createElement('p');\n\n  p.textContent = description;\n  notification.appendChild(h2);\n  notification.appendChild(p);\n\n  document.body.appendChild(notification);\n\n  setTimeout(() => {\n    notification.style.display = 'none';\n  }, 2000);\n};\n\nconst form = document.createElement('form');\n\nform.classList.add('new-employee-form');\n\nform.innerHTML = `\n  <label for=\"employeeName\">\n    Name:\n    <input data-qa=\"name\" type=\"text\" id=\"employeeName\" name=\"employeeName\">\n  </label>\n  <label for=\"position\">\n    Position:\n    <input data-qa=\"position\" type=\"text\" id=\"position\" name=\"position\">\n  </label>\n  <label for=\"office\">\n    Office:\n    <select data-qa=\"office\" id=\"office\" name=\"office\">\n      <option value=\"Tokyo\">Tokyo</option>\n      <option value=\"Singapore\">Singapore</option>\n      <option value=\"London\">London</option>\n      <option value=\"New York\">New York</option>\n      <option value=\"Edinburgh\">Edinburgh</option>\n      <option value=\"San Francisco\">San Francisco</option>\n    </select>\n  </label>\n  <label for=\"age\">\n    Age:\n    <input data-qa=\"age\" type=\"number\" id=\"age\" name=\"age\">\n  </label>\n  <label for=\"salary\">\n    Salary:\n    <input data-qa=\"salary\" type=\"number\" id=\"salary\" name=\"salary\">\n  </label>\n  <button type=\"submit\">Save to table</button>\n`;\n\ndocument.body.appendChild(form);\n\nfunction salaryFormat(number) {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(number);\n}\n\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const employeeName = form.employeeName.value;\n  const position = form.position.value;\n  const office = form.office.value;\n  const age = form.age.value;\n  const salary = form.salary.value;\n\n  if (employeeName.trim().length < 4) {\n    pushNotification(100, 5, 'Error', 'Name must be grater than 4', 'error');\n  }\n\n  if (age < 18 || age > 90) {\n    pushNotification(220, 5, 'Error', 'Age must be between 18 and 90', 'error');\n  }\n\n  if (\n    employeeName.trim().length >= 4 &&\n    position.trim() &&\n    office &&\n    age > 18 &&\n    age < 90 &&\n    salary\n  ) {\n    const newRow = document.createElement('tr');\n    const salaryFormated = salaryFormat(parseFloat(salary));\n\n    newRow.innerHTML = `\n    <td>${employeeName}</td>\n    <td>${position}</td>\n    <td>${office}</td>\n    <td>${age}</td>\n    <td>${salaryFormated}</td>\n  `;\n    tbody.appendChild(newRow);\n    form.reset();\n\n    pushNotification(\n      220,\n      5,\n      'Success',\n      'Employee was successfully added',\n      'success',\n    );\n  } else {\n    pushNotification(340, 5, 'Error', 'All fields must be filled!', 'error');\n  }\n});\n\ntbody.addEventListener('dblclick', (e) => {\n  if (e.target && e.target.nodeName === 'TD') {\n    const cell = e.target;\n    const originalContent = cell.innerText;\n\n    cell.innerText = '';\n\n    const input = document.createElement('input');\n\n    input.type = 'text';\n    input.value = originalContent;\n    cell.appendChild(input);\n    input.focus();\n\n    input.addEventListener('blur', () => {\n      saveCellContent(cell, input, originalContent);\n    });\n\n    input.addEventListener('keydown', (ev) => {\n      if (ev.key === 'Enter') {\n        saveCellContent(cell, input, originalContent);\n      }\n    });\n  }\n});\n\nfunction saveCellContent(cell, input, originalContent) {\n  const newContent = input.value.trim();\n\n  if (newContent) {\n    if (cell.innerText === 'Salary') {\n      const salary = parseFloat(newContent.replace(/[$,]/g, ''));\n\n      if (!isNaN(salary)) {\n        cell.innerText = salaryFormat(salary);\n      } else {\n        cell.innerText = originalContent;\n        pushNotification('Error', 'Invalid salary format!', 'error');\n      }\n    } else {\n      cell.innerText = newContent;\n    }\n  } else {\n    cell.innerText = originalContent;\n  }\n}\n"],"names":["table","document","querySelector","headers","querySelectorAll","tbody","forEach","header","index","addEventListener","rowsArray","isAscending","Array","from","sortDirections","sortedRows","sort","rowA","rowB","cellA","cells","innerText","cellB","parseInt","parseFloat","replace","localeCompare","row","appendChild","length","fill","e","target","nodeName","parentNode","tr","classList","remove","add","pushNotification","posTop","posRight","title","description","type","notification","createElement","className","concat","setAttribute","style","top","right","h2","textContent","p","body","setTimeout","display","form","salaryFormat","number","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","format","saveCellContent","cell","input","originalContent","newContent","value","trim","salary","isNaN","innerHTML","preventDefault","employeeName","position","office","age","newRow","salaryFormated","reset","focus","ev","key"],"version":3,"file":"index.a4a83b1c.js.map"}